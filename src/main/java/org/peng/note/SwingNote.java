package org.peng.note;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class SwingNote extends JFrame {
    private JButton button1;
    private JButton button2;
    private JTextArea textArea1;
    private JPanel swingnote;
    private JLabel stateBar;

    private String title; // 窗口的标题

    public SwingNote() {
        setUpEventListener();
    }

    private void setUpEventListener() {
        // 按下窗口关闭钮事件处理
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                closeFile();
            }
        });
    }

    public static void main(String[] args) {
        SwingNote frame = new SwingNote();
        frame.setTitle("记事本");
        frame.setContentPane(new SwingNote().swingnote);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setSize(500, 500);
        frame.setLocation(100, 100);

        //stateBar.setHorizontalAlignment(SwingConstants.LEFT);
        //stateBar.setBorder(BorderFactory.createEtchedBorder());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        swingnote = new JPanel();
        swingnote.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JToolBar toolBar1 = new JToolBar();
        swingnote.add(toolBar1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        button1 = new JButton();
        button1.setText("Button");
        toolBar1.add(button1);
        button2 = new JButton();
        button2.setText("Button");
        toolBar1.add(button2);
        final Spacer spacer1 = new Spacer();
        swingnote.add(spacer1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        swingnote.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textArea1 = new JTextArea();
        scrollPane1.setViewportView(textArea1);
        stateBar = new JLabel();
        stateBar.setText("state Bar");
        swingnote.add(stateBar, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return swingnote;
    }

    private void saveFile() {
        // 从标题栏取得文件名称
        File file = new File(getTitle());

        // 若指定的文件不存在
        if (!file.exists()) {
            // 执行另存为
            saveFileAs();
        } else {
            try {
                // 开启指定的文件
                BufferedWriter buf = new BufferedWriter(new FileWriter(file));
                // 将文字编辑区的文字写入文件
                buf.write(textArea1.getText());
                buf.close();
                // 设定状态栏为未修改
                stateBar.setText("未修改");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.toString(), "写入文件失败",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void saveFileAs() {
        // 显示文件对话框
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showSaveDialog(null);

        // 如果确认选取文件
        if (option == JFileChooser.APPROVE_OPTION) {
            // 取得选择的文件
            File file = fileChooser.getSelectedFile();

            // 在标题栏上设定文件名称
            setTitle(file.toString());

            try {
                // 建立文件
                file.createNewFile();
                // 进行文件保存
                saveFile();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.toString(), "无法建立新文件",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }


    private void closeFile() {
        // 是否已保存文件
        if (isCurrentFileSaved()) {
            // 释放窗口资源，而后关闭程序
            dispose();
        } else {
            int option = JOptionPane.showConfirmDialog(null, "文件已修改，是否保存？",
                    "保存文件？", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE, null);

            switch (option) {
                case JOptionPane.YES_OPTION:
                    saveFile();
                    break;
                case JOptionPane.NO_OPTION:
                    dispose();
            }
        }
    }

    private void cut() {
        textArea1.cut();
        stateBar.setText("已修改");
        //popUpMenu.setVisible(false);
    }

    private void copy() {
        textArea1.copy();
        //popUpMenu.setVisible(false);
    }

    private void paste() {
        textArea1.paste();
        stateBar.setText("已修改");
        //popUpMenu.setVisible(false);
    }

    private void processTextArea() {
        stateBar.setText("已修改");
    }

    private boolean isCurrentFileSaved() {
        if (stateBar.getText().equals("未修改")) {
            return false;
        } else {
            return true;
        }
    }


    public void setData(SwingNote data) {
    }

    public void getData(SwingNote data) {
    }

    public boolean isModified(SwingNote data) {
        return false;
    }
}
